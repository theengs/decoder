name: PR_Build

on: [push, pull_request]

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v3
    - uses: pre-commit/action@v3.0.0
  gcc:
    name: GCC
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - gcc: "9"
    steps:
      - name: Install
        run: |
          sudo add-apt-repository -yn 'deb http://archive.ubuntu.com/ubuntu/ trusty main'
          sudo add-apt-repository -yn 'deb http://archive.ubuntu.com/ubuntu/ trusty universe'
          sudo add-apt-repository -yn 'deb http://archive.ubuntu.com/ubuntu/ xenial main'
          sudo add-apt-repository -yn 'deb http://archive.ubuntu.com/ubuntu/ xenial universe' 
          sudo add-apt-repository -yn 'deb http://archive.ubuntu.com/ubuntu/ bionic main'
          sudo add-apt-repository -yn 'deb http://archive.ubuntu.com/ubuntu/ bionic universe' 
          sudo apt-get update
          sudo apt-get install -y gcc-${{ matrix.gcc }} g++-${{ matrix.gcc }}
      - name: Checkout
        uses: actions/checkout@v2
      - name: Checkout submodules
        run: git submodule update --init --recursive
      - name: Configure
        run: cmake -DCMAKE_BUILD_TYPE=Debug .
        env:
          CC: gcc-${{ matrix.gcc }}
          CXX: g++-${{ matrix.gcc }}
          CXXFLAGS: ${{ matrix.cxxflags }}
      - name: Build
        run: cmake --build .
      - name: Test
        run: ctest --output-on-failure -V -C Debug .

  clang:
    name: Clang
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - clang: "10"
    steps:
      - name: Install
        run: |
          sudo add-apt-repository -yn 'deb http://archive.ubuntu.com/ubuntu/ trusty main'
          sudo add-apt-repository -yn 'deb http://archive.ubuntu.com/ubuntu/ trusty universe'
          sudo add-apt-repository -yn 'deb http://archive.ubuntu.com/ubuntu/ xenial main'
          sudo add-apt-repository -yn 'deb http://archive.ubuntu.com/ubuntu/ xenial universe' 
          sudo add-apt-repository -yn 'deb http://archive.ubuntu.com/ubuntu/ bionic main'
          sudo add-apt-repository -yn 'deb http://archive.ubuntu.com/ubuntu/ bionic universe' 
          sudo apt-get update
          sudo apt-get install -y clang-${{ matrix.clang }}
      - name: Checkout
        uses: actions/checkout@v2
      - name: Checkout submodules
        run: git submodule update --init --recursive
      - name: Configure
        run: cmake -DCMAKE_BUILD_TYPE=Debug .
        env:
          CC: clang-${{ matrix.clang }}
          CXX: clang++-${{ matrix.clang }}
          CXXFLAGS: >-
            ${{ matrix.cxxflags }}
            ${{ contains(matrix.cxxflags, 'libc++') && '-I/usr/lib/llvm-10/include/c++/v1/' || '' }}
      - name: Build
        run: cmake --build .
      - name: Test
        run: ctest --output-on-failure -V -C Debug .

  xcode:
    name: XCode
    needs: clang
    runs-on: macos-11
    strategy:
      fail-fast: false
      matrix:
        include:
          - xcode: "13.2.1"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Checkout submodules
        run: git submodule update --init --recursive
      - name: Select XCode version
        run: sudo xcode-select --switch /Applications/Xcode_${{ matrix.xcode }}.app
      - name: Configure
        run: cmake -DCMAKE_BUILD_TYPE=Debug .
      - name: Build
        run: cmake --build .
      - name: Test
        run: ctest --output-on-failure -V -C Debug .

  msvc:
    name: Visual Studio
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2019
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Checkout submodules
        run: git submodule update --init --recursive
      - name: Configure
        run: cmake -DCMAKE_BUILD_TYPE=Debug .
      - name: Build
        run: cmake --build .
      - name: Test
        run: ctest --output-on-failure -V -C Debug .

  examples:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio
    - name: Build examples
      env:
        PLATFORMIO_BUILD_CACHE_DIR: "../../.pio/buildcache"
      run: |
        find . -name platformio.ini -type f | sed 's,/platformio.ini$,,' | xargs --verbose -n 1 pio run --jobs 2 --project-dir

  python:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
        fetch-depth: 0  # deep clone for setuptools-scm
    - name: Set up Python
      uses: actions/setup-python@v2
    - name: Install make tools
      run: |
        python3 -m pip install --upgrade pip
        pip3 install setuptools setuptools_scm cmake wheel scikit-build ninja
    - name: get lastest release tag
      id: last_release
      uses: InsonusK/get-latest-release@v1.0.1
      with:
        myToken: ${{ github.token }}
        view_top: 1
    - name: Install python decoder
      run: |
        cd python
        pip install .
